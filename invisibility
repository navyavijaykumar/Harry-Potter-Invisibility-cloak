import cv2
import numpy as np
import time
from matplotlib import pyplot as plt

# Function to display images in Jupyter Notebook
def display_image(image):
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.show()

# Initialize the webcam
cap = cv2.VideoCapture(0)
time.sleep(3)  # Allow the camera to warm up

# Capture the background for a few seconds
for i in range(30):
    ret, background = cap.read()
background = np.flip(background, axis=1)

# Define the range of the color to be detected (here, the color is blue)
lower_blue = np.array([100, 150, 0])
upper_blue = np.array([140, 255, 255])

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    frame = np.flip(frame, axis=1)

    # Convert the frame from BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Create a mask to detect the specified color
    mask = cv2.inRange(hsv, lower_blue, upper_blue)

    # Refine the mask
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, np.ones((3, 3), np.uint8))
    mask = cv2.morphologyEx(mask, cv2.MORPH_DILATE, np.ones((3, 3), np.uint8))

    # Create an inverse mask
    mask_inv = cv2.bitwise_not(mask)

    # Segment the color part out of the frame using bitwise and with the mask
    res1 = cv2.bitwise_and(frame, frame, mask=mask_inv)

    # Segment the background part out of the captured background using bitwise and with the inverse mask
    res2 = cv2.bitwise_and(background, background, mask=mask)

    # Combine the two results to get the final output
    final_output = cv2.addWeighted(res1, 1, res2, 1, 0)
    
    # Display the final output in Jupyter Notebook
    display_image(final_output)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam
cap.release()
